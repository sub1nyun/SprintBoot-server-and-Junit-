package com.example.book.web;


import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;

import com.example.book.domain.Book;
import com.example.book.service.BookService;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import lombok.extern.slf4j.Slf4j;


//단위 테스트 -> 컨트롤러만 테스트 -> Controller 관련 로직만 IoC 띄움 
//Filter, ControllerAdvice -> 익셉션 처리할 때 섰음
//컨트롤러를 위한 객체들이 메모리에 뜸 -> 전체가 뜨지않아 가벼움

@Slf4j // log
@WebMvcTest // 실제 Controller, Filter, advice를 IoC에 띄우는 기능
//@ExtendWith(SpringExtension.class) -> Jnuit5 테스트지만 위 어노테이션에 들어가있음
//@RunWith(SpringRunner.class) // 필수 -> Junit4 테스트를 할때 스프링 환경에서 하고 싶다면
public class BookControllerUnitTest {

	@Autowired //@WebMvcTest안에 @AutoConfigureMockMvc 있어서 DI 가능
	private MockMvc mvc;
	
	@MockBean //(가짜) // IoC 환경에 bean 등록됨
	private BookService bookService;
	
	//BDDMockito 패턴
	@Test
	public void save_테스트() throws JsonProcessingException {
		// given 테스트를 하기 위한 준비
		// object를 json으로 바꾸는 함수
		String content = new ObjectMapper().writeValueAsString(new Book(null, "스프링 따라하기", "코스"));
		log.info(content);
	}
	
}
